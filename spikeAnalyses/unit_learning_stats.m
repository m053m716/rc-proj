%UNIT_LEARNING_STATS Use Mitz/Wise approach for Figs 2, S4: count spikes in pre-defined epochs to define activity
%
%  Sets up Figure 3: do trends in activity distinguish specific sub-types
%  of unit trends, and if so, are those trends more strongly associated
%  with one area or another?

clc;
clearvars -except r
if exist('r','var')==0
   r = utils.loadTables('rate');
else
   fprintf(1,'Found `r` (<strong>%d</strong> rows) in workspace.',size(r,1));
   k = 5;
   fprintf(1,'\n\t->\tPreview (%d rows):\n\n',k);
   disp(r(randsample(size(r,1),k),:));
end
if ismember('Group',r.Properties.VariableNames) && ~ismember('GroupID',r.Properties.VariableNames)
   r.Properties.VariableNames{'Group'} = 'GroupID';
end

%% Get subset for analysis
rSub = analyze.get_subset(r,'align',{'Grasp'});
[~,rSub] = analyze.trials.getChannelWeeklyGroupings(rSub,'animal',true);

%%
clc;
% Create corresponding figures.
outPath = defaults.files('reach_extension_figure_dir');
if exist(outPath,'dir')==0
   mkdir(outPath);
end

% Initialize data output variables and data subset to pass to figures %
Data = struct;
mdl = struct;

% Generate figures corresponding to each epoch %
% % Pre-Grasp Figures % %
[fig,mdl.pre.count,Data.pre.count] = analyze.behavior.per_animal_area_mean_trends(rSub,...
   'N_Pre_Grasp',...
   'YLabel','Spike Count',...
   'FitOptions',{...
      'FitMethod','REMPL',...
      'Distribution','binomial',...
      'DummyVarCoding','effects',...
      'Link','logit' ...
      },...
   'LegendStyle','animals',...
   'LegendLocation','eastoutside',...
   'YLim',[0 80],...
   'Tag','Fig2a',...
   'ID',10,...
   'Title','Activity: Pre-Grasp (successful + included)');
saveas(fig,fullfile(outPath,'Fig2a - Pre-Grasp Trends 95CB - Animal Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2a - Pre-Grasp Trends 95CB - Animal Mean Trends.fig'));
delete(fig);

% % Reach Figures % %
[fig,mdl.reach.count,Data.reach.count] = analyze.behavior.per_animal_area_mean_trends(rSub,...
   'N_Reach',...
   'YLabel','Spike Count',...
   'RandomCovariates',{'Duration','Reach_Epoch_Duration'},...
   'FitOptions',{...
      'FitMethod','REMPL',...
      'Distribution','binomial',...
      'DummyVarCoding','effects',...
      'Link','logit' ...
      },...
   'LegendStyle','animals',...
   'LegendLocation','eastoutside',...
   'YLim',[0 80],...
   'Tag','Fig2b',...
   'ID',11,...
   'Title','Activity: Reach (successful + included)');
saveas(fig,fullfile(outPath,'Fig2b - Reach Trends 95CB - Animal Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2b - Reach Trends 95CB - Animal Mean Trends.fig'));
delete(fig);

% % Retract Figures % %
[fig,mdl.retract.count,Data.retract.count] = analyze.behavior.per_animal_area_mean_trends(rSub,...
   'N_Retract',...
   'YLabel','Spike Count',...
   'RandomCovariates',{'Duration','Retract_Epoch_Duration'},...
   'FitOptions',{...
      'FitMethod','REMPL',...
      'Distribution','binomial',...
      'DummyVarCoding','effects',...
      'Link','logit' ...
      },...
   'LegendStyle','animals',...
   'LegendLocation','eastoutside',...
   'YLim',[0 80],...
   'Tag','Fig2c',...
   'ID',12,...
   'Title','Activity: Retract (successful + included)');
saveas(fig,fullfile(outPath,'Fig2c - Retract Trends 95CB - Animal Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2c - Retract Trends 95CB - Animal Mean Trends.fig'));
delete(fig);

%% Make predictive models, holding out Performance
Data.pre.pred = Data.pre.count;
Data.pre.pred.GroupID = categorical(ones(size(Data.pre.pred,1),1).*2,1:2,{'Ischemia','Intact'});
Data.reach.pred = Data.reach.count;
Data.reach.pred.GroupID = categorical(ones(size(Data.reach.pred,1),1).*2,1:2,{'Ischemia','Intact'});
Data.retract.pred = Data.retract.count;
Data.retract.pred.GroupID = categorical(ones(size(Data.retract.pred,1),1).*2,1:2,{'Ischemia','Intact'});

Data.pre.pred.N_Pre_Hat = predict(mdl.pre.count,Data.pre.pred).*Data.pre.pred.N_Total;
Data.reach.pred.N_Reach_Hat = predict(mdl.reach.count,Data.reach.pred).*Data.reach.pred.N_Total;
Data.retract.pred.N_Retract_Hat = predict(mdl.retract.count,Data.retract.pred).*Data.retract.pred.N_Total;

rSub = analyze.get_subset(r,'align',{'Grasp'});
rWeek = analyze.trials.getChannelWeeklyGroupings(rSub,'animal',true);
rSub = analyze.behavior.mergePredictionData(rSub,Data);

%% Fit Error Prediction models
S = struct(...
   'Link',@(mu)2.*atanh(2.*mu - 1), ...
   'Derivative',@(mu)1./(mu - mu.^2), ...
   'SecondDerivative',@(mu)(2.*mu - 1)./(((mu - 1).^2).*(mu.^2)), ...
   'Inverse',@(y)1./(1+exp(-y))...
   );
mdl.all.outcome = fitglme(rSub,...
   'Labels~GroupID*Area*PostOpDay+(1+N_Pre_Error+N_Reach_Error+N_Retract_Error+N_Pre_Grasp+N_Reach+N_Retract|ChannelID)',...
   'FitMethod','REMPL',...
   'Distribution','Normal',...
   'Link',S,....
   'DummyVarCoding','effects');

%% Make figure to show predictive model result
fig = analyze.stat.plotROC(mdl.all.outcome);
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - All.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - All.fig'));
delete(fig);

fig = analyze.stat.batchROC(mdl.all.outcome,...
   'AnimalID',{'RC-04','RC-08','RC-14','RC-18'});
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - Animals.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - Animals.fig'));
delete(fig);

fig = analyze.stat.batchROC(mdl.all.outcome,'GroupID*Area*Week');
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - GroupxAreaxWeek.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - GroupxAreaxWeek.fig'));
delete(fig);

fig = analyze.stat.batchROC(mdl.all.outcome,'AnimalID*Week');
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxWeek.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxWeek.fig'));
delete(fig);

% RC-04: Big recovery
fig = analyze.stat.batchROC(mdl.all.outcome,'AnimalID*Area*Week','RC-04');
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-04.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-04.fig'));
delete(fig);

% RC-05: Better performance more-or-less throughout (Ischemia rat)
fig = analyze.stat.batchROC(mdl.all.outcome,'AnimalID*Area*Week','RC-05');
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-05.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-05.fig'));
delete(fig);

% RC-08: Big recovery
fig = analyze.stat.batchROC(mdl.all.outcome,'AnimalID*Area*Week','RC-08');
saveas(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-08.png'));
savefig(fig,fullfile(outPath,'Fig3 - Outcome Prediction ROC - Unit Counts - AnimalIDxAreaxWeek - RC-08.fig'));
delete(fig);

%% Do multi-model prediction for trends at the "Week" level
[fig,mdl.pre.count,T.pre_full] = analyze.behavior.multi_model_fit(rSub,...
   'N_Pre_Grasp','Title','Pre-Grasp Epoch','YLim',[0 250],...
   'DurationTrendVar','Duration');
saveas(fig,fullfile(outPath,'Fig2a - Pre Counts 95CB - Grouped Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2a - Pre Counts 95CB - Grouped Mean Trends.fig'));
delete(fig);

[fig,mdl.reach.count,T.pre_full] = analyze.behavior.multi_model_fit(rSub,...
   'N_Reach','Title','Reach Epoch','YLim',[0 250],...
   'SimpleModelFormula','%s~PostOpDayc+Reach_Epoch_Duration+Duration+(1+PostOpDay|AnimalID)',...
   'DurationTrendVar','Reach_Epoch_Duration');
saveas(fig,fullfile(outPath,'Fig2b - Reach Counts 95CB - Grouped Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2b - Reach Counts 95CB - Grouped Mean Trends.fig'));
delete(fig);

[fig,mdl.retract.count,T.pre_full] = analyze.behavior.multi_model_fit(rSub,...
   'N_Retract','Title','Retract Epoch','YLim',[0 250],...
   'SimpleModelFormula','%s~PostOpDayc+Retract_Epoch_Duration+Duration+(1+PostOpDay|AnimalID)',...
   'DurationTrendVar','Retract_Epoch_Duration');
saveas(fig,fullfile(outPath,'Fig2c - Retract Counts 95CB - Grouped Mean Trends.png'));
savefig(fig,fullfile(outPath,'Fig2c - Retract Counts 95CB - Grouped Mean Trends.fig'));
delete(fig);

%% Get prediction models first
rWeek.Weekc = ordinal(rWeek.Week);
mdl.pre.predict = fitglme(rWeek,...
   'n_Pre_mean~Weekc+Duration+(1+Week|AnimalID)',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');
mdl.reach.predict = fitglme(rWeek,...
   'n_Reach_mean~Weekc+Reach_Epoch_Duration+Duration+n_Pre_mean+(1+Week|AnimalID)',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');
mdl.retract.predict = fitglme(rWeek,...
   'n_Retract_mean~Weekc+Retract_Epoch_Duration+Duration+n_Pre_mean+(1+Week|AnimalID)',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');
disp(mdl.pre.predict.Rsquared);
disp(mdl.reach.predict.Rsquared);
disp(mdl.retract.predict.Rsquared);

% Use prediction values in subsequent models
rWeek.n_Pre_pred = predict(mdl.pre.predict,rWeek);
rWeek.n_Reach_pred = predict(mdl.reach.predict,rWeek);
rWeek.n_Retract_pred = predict(mdl.retract.predict,rWeek);

%% Fit GLME for weekly/channel grouped count data
% Make model for spike counts during "Pre" or "Baseline" epoch
mdl.pre.weeks = fitglme(rWeek,...
   'n_Pre_mean~n_Pre_pred+GroupID*Area*Weekc',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');

% Make model for spike counts during "Reach" epoch
mdl.reach.weeks = fitglme(rWeek,...
   'n_Reach_mean~n_Reach_pred+GroupID*Area*Weekc',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');


% Make model for spike counts during "Retract" epoch
mdl.retract.weeks = fitglme(rWeek,...
   'n_Retract_mean~n_Retract_pred+GroupID*Area*Weekc',...
   'FitMethod','REMPL',...
   'Distribution','binomial',...
   'Link','logit',...
   'BinomialSize',rWeek.n_Total,...
   'Weights',rWeek.n_Blocks,...
   'DummyVarCoding','effects');

%% Make tables
% Make table for individual animal effects
writetable(rWeek,fullfile(defaults.files('local_tank'),'TABLE-S4.xlsx'));

% Aggregate and test random effects to get significance by
% {Group,Area,Week}
T = struct;
% fcn = struct('mu',@(x)nanmean(x),'sigma',@(x)nanstd(x));
% T.pre= analyze.stat.groupLevelTests(rWeek,mdl.pre.weeks,rSub,fcn,{'N_Pre_Grasp'});
T.pre = analyze.stat.weekTrendTable(mdl.pre.weeks);
writetable(T.pre,fullfile(defaults.files('local_tank'),'TABLE-1.xlsx'),'Sheet','N_PRE');
fig = analyze.trials.plotTableData(T,'Pre');
saveas(fig,fullfile(outPath,'Fig2d - Pre Weekly Group Area Count Trends.png'));
savefig(fig,fullfile(outPath,'Fig2d - Pre Weekly Group Area Count Trends.fig'));
delete(fig);

% T.reach = analyze.stat.groupLevelTests(rWeek,mdl.reach.weeks,rSub,fcn,{'N_Reach'});
T.reach = analyze.stat.weekTrendTable(mdl.reach.weeks);
writetable(T.reach,fullfile(defaults.files('local_tank'),'TABLE-1.xlsx'),'Sheet','N_REACH');
fig = analyze.trials.plotTableData(T,'Reach');
saveas(fig,fullfile(outPath,'Fig2e - Reach Weekly Group Area Count Trends.png'));
savefig(fig,fullfile(outPath,'Fig2e - reach Weekly Group Area Count Trends.fig'));
delete(fig);

% T.retract = analyze.stat.groupLevelTests(rWeek,mdl.retract.weeks,rSub,fcn,{'N_Retract'});
T.retract = analyze.stat.weekTrendTable(mdl.retract.weeks);
writetable(T.retract,fullfile(defaults.files('local_tank'),'TABLE-1.xlsx'),'Sheet','N_RETRACT');
fig = analyze.trials.plotTableData(T,'Retract');
saveas(fig,fullfile(outPath,'Fig2f - Reach Weekly Group Area Count Trends.png'));
savefig(fig,fullfile(outPath,'Fig2f - reach Weekly Group Area Count Trends.fig'));
delete(fig);

%% Display model outputs
clc;
utils.displayModel(mdl.pre.count,0.05,'Fig2a','MODEL-10a');
utils.displayModel(mdl.reach.count,0.05,'Fig2b','MODEL-11a');
utils.displayModel(mdl.retract.count,0.05,'Fig2c','MODEL-12a');
utils.displayModel(mdl.pre.predict,0.05,'Table-1','MODEL-10b');
utils.displayModel(mdl.reach.predict,0.05,'Table-1','MODEL-11b');
utils.displayModel(mdl.retract.predict,0.05,'Table-1','MODEL-12b');
utils.displayModel(mdl.pre.weeks,0.05,'Table-2','MODEL-10c');
utils.displayModel(mdl.reach.weeks,0.05,'Table-2','MODEL-11c');
utils.displayModel(mdl.retract.weeks,0.05,'Table-2','MODEL-12c');

%% Save model outputs
tic; fprintf(1,'Saving Fig [2,S4] models...');
save(defaults.files('rate_models_pre_reach_retract_matfile'),'-struct','mdl');
fprintf(1,'complete\n'); 
fprintf(1,'\t->\t%6.2f seconds elapsed\n',toc);
utils.addHelperRepos();
sounds__.play('bell',0.8,-15);
