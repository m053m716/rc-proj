function [fig,exclusions] = view_all_corrs(C,forceSave)
%VIEW_ALL_CORRS  Plot all cross-correlations for "main-diagonal" 
%
%  fig = analyze.nnm.view_all_corrs(C);
%  [fig,exclusions] = analyze.nnm.view_all_corrs(C,forceSave);
%
%  -- Inputs --
%  C     :     Second output argument from `analyze.nnm.nnmf_table(T)`
%  forceSave : (Optional) default is false; if true, save figure
%                 automatically using defaults. If no output is specified,
%                 then deletes figure after save (if set to true)
%
%  -- Output --
%  fig   :     Figure handle
%              -> Figure contains one line for each factor. Columns are the
%                 individual recording blocks, by index (duplicated for
%                 'Reach', and 'Grasp'). The y-axis is the corresponding
%                 main-diagonal cross-correlation which indicates the
%                 degree of correlation with the "default" h0 used to
%                 initialize the loadings matrix estimate during the
%                 alternating least-squares constrained optimization
%                 procedure.
%
%  exclusions : Struct with indices corresponding to points shown as
%                 crossing outlier thresholds.

if nargout < 1
   close all force;
end

if nargin < 2
   forceSave = false;
else
   nnmf_summary_fig = defaults.files('nnmf_summary_fig');
end

% % Set params % %
[c,corr_threshold,rms_diff_threshold,max_n_pks2label] = ...
   defaults.nnmf_analyses('color_order','corr_threshold',...
      'rms_diff_threshold','max_n_pks2label');

% % Make figure % %
fig = figure(...
   'Name','NNMF "Matches"',...
   'Color','w',...
   'Units','Normalized',...
   'Position',[0.1 0.1 0.8 0.8],...
   'NumberTitle','off');

% % Retrieve correlations % %
[locs_C,locs_D,D,mu,exclusions] = analyze.nnm.get_exclusions(C);

nBlock = size(D,2);
idx = 1:nBlock;
xl = [0 nBlock+1];
ax_top = subplot(2,1,1);

set(ax_top,...
   'Color','w',...
   'XColor','k',...
   'YColor','k',...
   'LineWidth',1.5,...
   'NextPlot','add',...
   'XLim',xl,...
   'YLim',[0 1],...
   'YTick',[0 0.5 1.0],...
   'XTick',[],...
   'FontName','Arial');

for ii = 1:size(D,1)
   tag = sprintf('Factor-%02g',ii);
   line(ax_top,idx,D(ii,:),'LineWidth',1.0,'Color',c(ii,:),...
      'DisplayName',tag,'Tag',['NNMF ' tag],...
      'LineStyle','none','Marker','.',...
      'MarkerSize',20);
end

line(ax_top,idx,mu,'LineWidth',2.0,'LineStyle','-',...
   'Color','k','Marker','o','MarkerFaceColor','r',...
   'DisplayName','Average','Tag','NNMF Average',...
   'MarkerIndices',idx(locs_C));
line(ax_top,xl,ones(1,2).*corr_threshold,'LineWidth',2,'LineStyle',':',...
   'Color',[0.5 0.5 0.5],'DisplayName',['\rho = ' num2str(corr_threshold)]);
h_div = line(ax_top,ones(1,2).*nBlock/2,[0 1],...
   'Color',[0.2 0.2 0.2],'LineWidth',1.25,...
   'LineStyle','--','DisplayName','Delimiter');
h_div.Annotation.LegendInformation.IconDisplayStyle = 'off';
text(ax_top,nBlock/4,0.1,char(C.Alignment(1)),'Color','k',...
   'FontName','Arial','FontWeight','bold','FontSize',14);
text(ax_top,nBlock*3/4,0.1,char(C.Alignment(end)),'Color','k',...
   'FontName','Arial','FontWeight','bold','FontSize',14);

yThis = 0.05;
for ii = min(max_n_pks2label,numel(locs_C)):-1:1
   iThis = idx(locs_C(ii));
   text(ax_top,...
      idx(iThis),...
      mu(iThis)-yThis,...
      [char(C.AnimalID(iThis)) newline sprintf('Day-%g',C.PostOpDay(iThis))],...
      'HorizontalAlignment','center',...
      'FontName','Arial',...
      'FontSize',10,...
      'Color','k');
end
text(ax_top,-25,0.5,sprintf('Exclude: %g/%g',numel(locs_C),nBlock),...
   'FontName','Arial','Color','k','FontSize',12,'FontWeight','bold');

legend(ax_top,'Location','best');

ylabel(ax_top,'Cross-Correlation','Color','k','FontName','Arial','FontSize',13);
title(ax_top,'NNMF "Matches"','FontName','Arial','Color','k','FontSize',16,...
   'FontWeight','bold');

ax_bot = subplot(2,1,2);
line(ax_bot,idx,C.NNMF_D,'Color','k','LineWidth',1.5,...
   'DisplayName','RMS Error','Tag','Error',...
   'Marker','o','MarkerFaceColor','r','MarkerIndices',idx(locs_D));
h_div2 = line(ax_bot,ones(1,2).*nBlock/2,[0 1],...
   'Color',[0.2 0.2 0.2],'LineWidth',1.25,...
   'LineStyle','--','DisplayName','Delimiter');
h_div2.Annotation.LegendInformation.IconDisplayStyle = 'off';
text(ax_bot,nBlock/4,0.5,char(C.Alignment(1)),'Color','k',...
   'FontName','Arial','FontWeight','bold','FontSize',14);
text(ax_bot,nBlock*3/4,0.5,char(C.Alignment(end)),'Color','k',...
   'FontName','Arial','FontWeight','bold','FontSize',14);

line(ax_bot,xl,ones(1,2).*rms_diff_threshold,'LineWidth',2,'LineStyle',':',...
   'Color',[0.5 0.5 0.5],'DisplayName',['D = ' num2str(rms_diff_threshold)]);
for ii = min(max_n_pks2label,numel(locs_D)):-1:1
   iThis = idx(locs_D(ii));
   text(ax_bot,...
      idx(iThis),...
      C.NNMF_D(iThis)+0.05,...
      [char(C.AnimalID(iThis)) newline sprintf('Day-%g',C.PostOpDay(iThis))],...
      'HorizontalAlignment','center',...
      'FontName','Arial',...
      'FontSize',8,...
      'Color','k');
end
text(ax_bot,-25,0.5,sprintf('Exclude: %g/%g',numel(locs_D),nBlock),...
   'FontName','Arial','Color','k','FontSize',12,'FontWeight','bold');
xlabel(ax_bot,'Animal Index','Color','k','FontName','Arial','FontSize',13);
ylabel(ax_bot,'RMS Error','Color','k','FontName','Arial','FontSize',13);

if forceSave
   p = fileparts(nnmf_summary_fig);
   if exist(p,'dir')==0
      mkdir(p);
   end
   savefig(fig,[nnmf_summary_fig '.fig']);
   saveas(fig,[nnmf_summary_fig '.png']);
   if (nargout < 1)
      delete(fig);
   end
end

end