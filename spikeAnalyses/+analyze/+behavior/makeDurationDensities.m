function fig = makeDurationDensities(UTrials,varargin)
%MAKEDURATIONDENSITIES Make figure with duration overlays for different epochs of behavior, by groupings
%
%  fig = analyze.behavior.makeDurationDensities(UTrials)
%  fig = analyze.behavior.makeDurationDensities(UTrials,'Name',value,...)
%
% Inputs
%  UTrials  - Table with unique trials
%  varargin - 'Name',value parameter pairs
%
% Output
%  fig      - Figure handle of new graphic (Fig. 1c?)

pars = struct;
pars.AxesColor = [0.0 0.0 0.0; ...
                  0.0 0.0 0.0; ...
                  0.3 0.3 0.3; ...
                  0.6 0.6 0.6];
pars.AxesPosition = [0.075 0.55 0.35 0.35; ...
                     0.550 0.55 0.35 0.35; ...
                     0.075 0.10 0.35 0.35; ...
                     0.550 0.10 0.35 0.35];
pars.AxesResponse = ["Duration";...
                     "Reach_Epoch_Proportion";...
                     "Reach_Epoch_Duration";...
                     "Retract_Epoch_Duration"];  
pars.ColorOrder = [0.0 0.0 0.0; ...
                   0.1 0.4 0.4; ...
                   0.7 0.0 0.0; ...
                   0.4 0.4 1.0; ...
                   0.0 0.0 0.7];
pars.Groupings = {'GroupID','Outcome'};
pars.LegendPosition = [0.375 0.225 0.10 0.15];
pars.LineStyle = ["-","--","-","--"];
pars.Threshold = [1.5,nan,0.65,0.75];
pars.XLim = [0 2.5; ...
             0 1.0; ...
             0 1.5; ...
             0 1.5];

fn = fieldnames(pars);
if numel(varargin) > 0
   if isstruct(varargin{1})
      pars = varargin{1};
      varargin(1) = [];
   end
end

for iV = 1:2:numel(varargin)
   idx = strcmpi(fn,varargin{iV});
   if sum(idx)==1
      pars.(fn{idx}) = varargin{iV+1};
   end
end

UTrials(isinf(UTrials.Duration) | isinf(UTrials.Reach_Epoch_Duration) | isinf(UTrials.Retract_Epoch_Duration),:) = [];

[G,TID] = findgroups(UTrials(:,pars.Groupings));
n = size(TID,1);
nTotal = size(UTrials,1);
fig = figure('Name','Fig 1c - Duration Density Estimates',...
   'Units','Normalized','Position',[0.25 0.25 0.5 0.5],...
   'Color','w','NumberTitle','off','UserData',UTrials);
ax = gobjects(numel(pars.AxesResponse),1);
hThresh = gobjects(sum(~isnan(pars.Threshold)),1);
hKDE = gobjects(numel(pars.AxesResponse),1);
iThresh = 0;
for iAx = 1:numel(ax)
   ax(iAx) = axes(fig,'Units','Normalized',...
      'XColor',pars.AxesColor(iAx,:),'YColor',pars.AxesColor(iAx,:),...
      'LineWidth',1.5,...
      'Color','none',...
      'NextPlot','add','FontName','Arial',...
      'Position',pars.AxesPosition(iAx,:),...
      'Tag',pars.AxesResponse(iAx),...
      'ColorOrder',pars.ColorOrder,...
      'XLim',pars.XLim(iAx,:));
   thisVar = pars.AxesResponse(iAx);
   axTitle = sprintf('%s (%s)',...
      strrep(thisVar,'_',' '),...
      UTrials.Properties.VariableUnits{thisVar});
   title(ax(iAx),axTitle,'FontName','Arial',...
      'Color','k','FontWeight','bold');
   
   ksdensity(ax(iAx),UTrials.(thisVar),'Function','pdf');
   c = findobj(ax(iAx).Children,'Tag','');
   set(c,'Tag','All',...
      'DisplayName',sprintf('All Trials (\\bf%d\\rm)',nTotal),...
      'LineWidth',2);
   
   if ~isnan(pars.Threshold(iAx))
      iThresh = iThresh + 1;
      pct = 100 * sum(UTrials.(thisVar) <= pars.Threshold(iAx))/nTotal;
      shortVar = strsplit(thisVar,"_");
      threshName = sprintf('%s_{thresh} (\\bf%4.1f%%\\rm)',shortVar(1),pct);
      hThresh(iThresh) = line(ax(iAx),ones(1,2).*pars.Threshold(iAx),ax(iAx).YLim,...
         'LineStyle',':','LineWidth',2.5,'Color',pars.AxesColor(iAx,:),...
         'Tag','Threshold',...
         'DisplayName',threshName);
   end
   
   
   for iN = 1:n
      idx = G==iN;
      ksdensity(ax(iAx),UTrials.(thisVar)(idx),'Function','pdf');
      hKDE(iN) = findobj(ax(iAx).Children,'Tag','');
      g1 = string(TID.(pars.Groupings{1})(iN));
      g2 = string(TID.(pars.Groupings{2})(iN));
      lab = sprintf('%s_{%s}',g1,extractBefore(g2,2));
      
      set(hKDE(iN),'Tag',sprintf('%s--%s',thisVar,lab),...
         'DisplayName',sprintf('%s (\\bf%d\\rm)',lab,sum(idx)),...
         'LineWidth',1.5,'LineStyle',pars.LineStyle(iN));
   end
   set(hThresh(iThresh),'YData',ax(iAx).YLim);
end
legend([hKDE; hThresh],'TextColor','black','FontName','TimesNewRoman',...
   'FontSize',9,'Parent',fig,'Position',pars.LegendPosition);

end