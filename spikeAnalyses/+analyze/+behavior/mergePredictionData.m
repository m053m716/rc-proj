function rSub = mergePredictionData(rSub,Data)
%MERGEPREDICTIONDATA Merge data from prediction models with data table
%
%  rSub = analyze.behavior.mergePredictionData(rSub,Data);
%
% Inputs
%  rSub - Table used in unit_learning_stats
%  Data - Struct of tables recovered from prediction models in
%           unit_learning_stats
%
% Output
%  rSub - Merged data table

analyze.behavior.mergeRatePerformance(rSub,false);
% Do table join for the "flipped" prediction values first
rSub = outerjoin(rSub,Data.pre.pred,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Pre_Hat'});
rSub = outerjoin(rSub,Data.reach.pred,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Reach_Hat'});
rSub = outerjoin(rSub,Data.retract.pred,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Retract_Hat'});
% Change names: "Tilde" for predictions using swapped GroupID categories
rSub.Properties.VariableNames{'N_Pre_Hat'} = 'N_Pre_Pred_Tilde';
rSub.Properties.VariableNames{'N_Reach_Hat'} = 'N_Reach_Pred_Tilde';
rSub.Properties.VariableNames{'N_Retract_Hat'} = 'N_Retract_Pred_Tilde';

% Do table join for the actual data, second
rSub = outerjoin(rSub,Data.pre.all,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Pre_Hat'});
rSub = outerjoin(rSub,Data.reach.all,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Reach_Hat'});
rSub = outerjoin(rSub,Data.retract.all,...
   'Keys',{'AnimalID','PostOpDay','Area'},...
   'MergeKeys',true,...
   'Type','Left',...
   'RightVariables',{'N_Retract_Hat'});

% Change names: "Hat" for predictions using actual data
rSub.Properties.VariableNames{'N_Pre_Hat'} = 'N_Pre_Pred_Hat';
rSub.Properties.VariableNames{'N_Reach_Hat'} = 'N_Reach_Pred_Hat';
rSub.Properties.VariableNames{'N_Retract_Hat'} = 'N_Retract_Pred_Hat';

% % Compute deltas for both the original and the "swapped" predictions % %
% Note: deltas are not squared, so we can retain sign info if needed     %
rSub.delta_Pre_Hat = rSub.N_Pre_Grasp - rSub.N_Pre_Pred_Hat;
rSub.delta_Reach_Hat = rSub.N_Reach - rSub.N_Reach_Pred_Hat;
rSub.delta_Retract_Hat = rSub.N_Retract - rSub.N_Retract_Pred_Hat;
rSub.delta_Pre_Tilde = rSub.N_Pre_Grasp - rSub.N_Pre_Pred_Tilde;
rSub.delta_Reach_Tilde = rSub.N_Reach - rSub.N_Reach_Pred_Tilde;
rSub.delta_Retract_Tilde = rSub.N_Retract - rSub.N_Retract_Pred_Tilde;

% Finally, compute epsilons, which is the "error" coefficient term, which
% will be used in the single-trial outcome classifier. %
rSub.epsilon_pre = 1 - rSub.delta_Pre_Tilde.^2 ./ (rSub.delta_Pre_Tilde.^2 + rSub.delta_Pre_Hat.^2);
rSub.epsilon_reach = 1 - rSub.delta_Reach_Tilde.^2 ./ (rSub.delta_Reach_Tilde.^2 + rSub.delta_Reach_Hat.^2);
rSub.epsilon_retract = 1 - rSub.delta_Retract_Tilde.^2 ./ (rSub.delta_Retract_Tilde.^2 + rSub.delta_Retract_Hat.^2);
rSub.Labels = double(rSub.Outcome)-1;
rSub.Properties.RowNames = rSub.ObservationID;
end