function fig = stemPCvariance(e,p)
%STEMPCVARIANCE Stem plot of variance explained per Principal Component
%
% fig = analyze.jPCA.stemPCvariance(e);
% fig = analyze.jPCA.stemPCvariance(e,p);
%
% Inputs
%  e   - Vector of cumulative % of variance explained by each PC
%  p   - (Optional) Parameters struct that is `jpca_params.PCStem` field
%
% Output
%  fig - Figure handle of generated figure 
%           (or provided figure handle from `p.Figure`)

if nargin < 2
   p = defaults.jPCA('jpca_params');
end

nTotal = numel(e); % For reference

if isfield(p,'PCStem')
   % Copy over the # of PCs from value computed in jpca_params
   p.PCStem.numPCs = p.numPCs;
   p = p.PCStem;
else
   % If not given # PCs used, just set this to All
   if ~isfield(p,'numPCs')
      p.numPCs = nTotal;
   end
end

% % If no figure handle given in input parameters, create one % %
if isempty(p.Figure)
   if isempty(p.Axes)
      fig = figure(...
         'Name',p.FigureTitle,...
         'NumberTitle','off',...
         'Color','w',...
         'Units','Normalized',...
         'Position',p.FigurePosition...
         );
   else % If Axes was given, use parent figure instead
      fig = get(p.Axes,'Parent');
   end
else
   fig = p.Figure;
end

% % Similarly, if no axes handle given, create axes % %
if isempty(p.Axes)
   ax = axes(fig,...
      'XColor','k',...
      'YColor','k',...
      'TickDir','out',...
      'LineWidth',p.LineWidth,...
      'FontName',p.FontName,...
      'FontSize',12,...
      'NextPlot','add');
else
   ax = p.Axes;
end

% % Contain all PCA stem objects in one group % %
hg = hggroup(ax,...
   'DisplayName','PC Variance Captured',...
   'Tag','All-PCs');

index = 1:p.numPCs;
hKeep = stem(...
   index, e(index), ...
   'Color',p.StemColor,...
   'LineWidth',p.LineWidth,...
   'LineStyle','-',...
   'Marker',p.Marker,...
   'MarkerFaceColor',p.MarkerColor,...
   'MarkerEdgeColor',p.MarkerColor,...
   'MarkerSize',p.MarkerSize,...
   'Tag','PC-Include',...
   'DisplayName','Included PCs', ...
   'Parent',hg ...
   );
hKeep.Annotation.LegendInformation.IconDisplayStyle = p.IconDisplayStyle;
if p.numPCs < nTotal
   index = (p.numPCs+1):nTotal;
   hNoise = stem(...
      index,e(index),...
      'Color',p.StemColor,...
      'LineWidth',p.LineWidth*0.85,...
      'LineStyle',':',...
      'Marker','none',...
      'Tag','PC-Noise',...
      'DisplayName','Noise PCs', ...
      'Parent',hg ...
   );
   hNoise.Annotation.LegendInformation.IconDisplayStyle = p.IconDisplayStyle;
end

% % Add threshold indicator for explained variance % %
xl = [0.5 nTotal+0.5];
hThresh = line(hg,...
   xl,ones(1,2).*e(p.numPCs),...
   'LineStyle','--',...
   'LineWidth',1.25,...
   'Color',p.ThresholdColor, ...
   'Tag','Threshold',...
   'DisplayName','Inclusion Threshold'...
   );
hThresh.Annotation.LegendInformation.IconDisplayStyle = p.IconDisplayStyle;

% Label the threshold y-abscissa %
tX = p.numPCs;
tY = min(e(p.numPCs)+15,105);
text(ax,tX,tY,sprintf('%3.2g%%',e(p.numPCs)),...
   'VerticalAlignment','top',...
   'HorizontalAlignment','center',...
   'FontName',p.FontName,...
   'Color',p.ThresholdColor,...
   'FontWeight','bold',...
   'FontSize',13);

% % (Optional): Add axes legend % %
if strcmpi(p.IconDisplayStyle,'on')
   legend(hg.Children,...
      'Location','southeast',...
      'FontName',p.FontName,...
      'FontSize',10,...
      'TextColor','black'...
      );
end
hg.Annotation.LegendInformation.IconDisplayStyle = 'off';

title(ax,sprintf(p.AxesTitleExpr,p.numPCs,e(p.numPCs)),...
   'FontName',p.FontName,...
   'Color','k',...
   'FontWeight','bold',...
   'FontSize',16);
xlabel(ax,'PC Index',...
   'FontName',p.FontName,...
   'Color','k',...
   'FontWeight','normal',...
   'FontSize',13);
ylabel(ax,'Percent of Original Explained',...
   'FontName',p.FontName,...
   'Color','k',...
   'FontWeight','normal',...
   'FontSize',13);
xlim(ax,xl);
ylim(ax,[0 105]);
ax.YTick = [0 25 50 75 100];

switch p.numPCs
   case 1
      ax.XTick = [1 nTotal];
      ax.XTickLabel = ...
         {'\bf \color{blue} 1',num2str(nTotal)};
   case nTotal
      ax.XTick = [1 nTotal];
      ax.XTickLabel = ...
         {'1',['\bf \color{blue} ' num2str(nTotal)]};
   otherwise
      ax.XTick = [1 p.numPCs nTotal];
      ax.XTickLabel = ...
         {'1',['\bf \color{blue} ' num2str(p.numPCs)],num2str(nTotal)};
end


end