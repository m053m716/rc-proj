function fig = plotTableData(T,field,varargin)
%PLOTTABLEDATA Plot struct data tables for weekly spike counts
%
%  fig = analyze.trials.plotTableData(T,field);
%  fig = analyze.trials.plotTableData(T);
%
% Inputs
%  T - Struct array containing fields referenced by `field`, or just the
%           struct directly (without field). Contents of struct fields are
%           the by-week table formatted data.
%  field - Name of the struct field (optional)
%  varargin - (Optional) 'Name',value pairs
%
% Output
%  fig - Figure handle
%
% See also: analyze.trials, unit_learning_stats,
%           analyze.stat.weekTrendTable

pars = struct;

pars.Color = struct('Ischemia', ...
      struct('RFA',[0.8 0.2 0.2], ...
             'CFA',[1.0 0.4 0.4]), ...
          'Intact',...
       struct('RFA',[0.2 0.2 0.8], ...
              'CFA',[0.4 0.4 1.0]));
pars.LineStyle = struct('Ischemia',...
      struct('RFA','-',...
             'CFA','-'), ...
          'Intact',...
       struct('RFA',':',...
              'CFA',':'));
pars.LineWidth = 2.0;
pars.Marker = struct('Ischemia',...
      struct('RFA','x',...
             'CFA','x'), ...
          'Intact',...
       struct('RFA','o',...
              'CFA','o'));
pars.MarkerFaceColor = [0.0 0.0 0.0];
pars.Offset = struct('Ischemia', ...
      struct('RFA',0.1,'CFA',0.2 ), ...
         'Intact',....
      struct('RFA',-0.2,'CFA',-0.1) ...
         );
pars.YLim = [0 100];
fn = fieldnames(pars);
if numel(varargin) > 0
   if isstruct(varargin{1})
      pars = varargin{1};
      varargin(1) = [];
   end
end

for iV = 1:2:numel(varargin)
   idx = strcmpi(fn,varargin{iV});
   if sum(idx)==1
      pars.(fn{idx}) = varargin{iV+1};
   end
end
      

if isstruct(T)
   if nargin < 2
      field = fieldnames(T);
      fig = gobjects(numel(field),1);
      for iF = 1:numel(field)
         fig(iF) = analyze.trials.plotTableData(T,field{iF},varargin{:});
      end
      return;
   end
   T = T.(lower(field));
else
   if nargin < 2
      field = 'Weekly Mean';
   end
end


fig = figure('Color','w','Name','Weekly Trends by Area');
ax = axes(fig,'FontName','Arial','NextPlot','add',...
   'XColor','k','YColor','k',...
   'XLim',[0.5 4.5],'XTick',1:4);

[G,~] = findgroups(T(:,{'GroupID','Area'}));

c = splitapply(@(wk,val,sd,group,area)errorbar(ax,wk+pars.Offset.(string(group(1))).(string(area(1))),val,sd,...
      'Marker',pars.Marker.(string(group(1))).(string(area(1))),...
      'DisplayName',sprintf('%s::%s',string(group(1)),string(area(1))),...
      'Tag',sprintf('%s::%s',string(group(1)),string(area(1))),...
      'Color',pars.Color.(string(group(1))).(string(area(1))),...
      'LineStyle',pars.LineStyle.(string(group(1))).(string(area(1))),...
      'LineWidth',pars.LineWidth,...
      'MarkerFaceColor',pars.MarkerFaceColor),...
   T.Week,T.(T.Properties.UserData.Response),T.sd,...
   T.GroupID,T.Area,G);
   
legend(ax,...
   'TextColor','black',...
   'Location','eastoutside',...
   'FontName','Arial');

title(ax,sprintf('%s by Grouping',strrep(field,'_',' ')),...
   'FontName','Arial','Color','k','FontWeight','bold');
ylabel(ax,'Spike Count (Mean \pm1 S.D.)',...
   'FontName','Arial','Color','k','FontWeight','bold');
xlabel(ax,'Post-Op Week',...
   'FontName','Arial','Color','k','FontWeight','bold');
ylim(ax,pars.YLim);
end