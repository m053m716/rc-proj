function meta = getMetadata(filename, icms_datafile)
%% GETMETADATA Import numeric data from a text file as a matrix.
%
%   meta = GETMETADATA(filename) Reads data from text file 
%              filename for the default selection.
%
%   meta = GETMETADATA(filename, startRow, endRow) Reads data 
%              from rows startRow through endRow of text file filename.
%
% Example:
%   meta = import_animal_metadata('notes.txt', 1, 4);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/07/30 06:29:24

%% Initialize variables.
% vars_to_parse = {'NAME','GROUP','SURG','WEIGHT'};
vars_to_parse = {};
delimiter = ' | ';
if nargin < 2
%    icms_datafile = 'P:\Extracted_Data_To_Move\Rat\TDTRat\icms_data.xlsx';
   icms_datafile = 'icms_data.xlsx';   
end

nheader_rows = 6;
startRow = 1;
endRow = 5;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'char', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
   frewind(fileID);
   dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'char', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
   for col=1:length(dataArray)
      dataArray{col} = [dataArray{col};dataArrayBlock{col}];
   end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
   raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));


%% Split data into numeric and string columns.
rawNumericColumns = {};
rawStringColumns = string(raw(:, [1,2]));


%% Create "notes" table
notes = table;
notes.varname = rawStringColumns(:, 1);
notes.value = rawStringColumns(:, 2);

%% Read animal metadata from ICMS data
animalpath = fileparts(filename);
animal = strsplit(animalpath,filesep);
basefolder = strjoin(animal(1:(end-1)),filesep);
animal = animal{end};

try
   [~,txt,~] = xlsread(fullfile(basefolder,icms_datafile),animal);

   L_ICMS = txt((nheader_rows+1):end,2);
   R_ICMS = txt((nheader_rows+1):end,3);

   l_icms = getICMScode(L_ICMS);
   r_icms = getICMScode(R_ICMS);

   l_ml = cellfun(@(x) x(1),L_ICMS);
   r_ml = cellfun(@(x) x(1),R_ICMS);
catch
   warning('Could not find ICMS file for %s.',animal);
   l_icms = repmat({'NN'},16,1);
   r_icms = repmat({'NN'},16,1);
   
   l_ml = repmat('N',16,1);
   r_ml = repmat('N',16,1);
end
%% Create output struct
meta = struct;

% Parse variables specified at top of function
for iV = 1:numel(vars_to_parse)
   idx = ismember(notes.varname,vars_to_parse{iV});
   if sum(idx)==1
      meta.(lower(vars_to_parse{iV})) = char(notes.value(idx));
   else
      warning('Could not parse variable: %s',vars_to_parse{IV});
   end
end

% Special variable field: LAYOUT
% Describes probe array configuration
idx = ismember(notes.varname,'LAYOUT');
if sum(idx)==1
   layout = notes.value(idx);
   layout = strsplit(layout,'_');

   l_ch = strsplit(layout{2},'-');
   r_ch = strsplit(layout{4},'-');

   l_ch = str2double(l_ch{1}) : str2double(l_ch{2});
   r_ch = str2double(r_ch{1}) : str2double(r_ch{2});

   meta.area = cell(32,1);
   meta.area(l_ch) = {layout{1}};
   meta.area(r_ch) = {layout{3}};

   meta.ml = cell(32,1);
   meta.ml(l_ch) = cellstr(l_ml);
   meta.ml(r_ch) = cellstr(r_ml);

   meta.icms = cell(32,1);
   meta.icms(l_ch) = l_icms;
   meta.icms(r_ch) = r_icms;
else
   warning('No probe layout parsed.');
end

end
