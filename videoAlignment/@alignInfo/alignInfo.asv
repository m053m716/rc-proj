classdef alignInfo < handle
%% ALIGNINFO  Class to update HUD & track alignment information

%% Properties 
   properties(SetAccess = private, GetAccess = public)
      % Graphics objects
      ax       % Axes to plot streams on
      tracker  % Line indicating current video time
      offset   % Line indicating current offset between datasets
      vidInfo  % Video information object
      
      % Data streams
      pellet   % Pellet break times (may not exist)
      beam     % Beam break times      
      paw      % Paw guesses from DLC
      
      alignLag % Buest guess or current alignment lag offset
   end
   
   properties(SetAccess = private, GetAccess = private)
      FS = 125;
      VID_FS = 30000/1001;
      currentVid = 1;
   end
   
%% Events
   events % These correspond to different scoring events
      align
      switchVid
   end
   
%% Methods
   methods (Access = public)
      % Construct the object for keeping track of which "button press" (or
      % trial) we are currently looking at
      function obj = alignInfo(dig_F,dlc_F,plt_ax,vidInfo_obj)
         
         obj.vidInfo = vidInfo_obj;
         obj.setDigitalStreams(dig_F);
         obj.setDLCStreams(dlc_F);
         
         obj.guessAlignment;
         
         obj.ax = plt_ax;
         obj.plotStreams;
         
      end
      
      function setDigitalStreams(obj,dig_F)
         if numel(dig_F)==2
            obj.pellet = load(fullfile(dig_F(2).folder,...
                                   dig_F(2).name),'data','fs');
            obj.pellet.t = linspace(0,...
            (numel(obj.pellet.data)-1)/obj.pellet.fs,...
             numel(obj.pellet.data));
         else
            obj.pellet = nan;
         end
         obj.beam = load(fullfile(dig_F(1).folder,...
                              dig_F(1).name),'data','fs');
         obj.beam.t = linspace(0,...
            (numel(obj.beam.data)-1)/obj.beam.fs,...
             numel(obj.beam.data));
      end
      
      function setDLCStreams(obj,dlc_F)
         vidTracking = importRC_Grasp(...
            fullfile(dlc_F(obj.currentVid).folder,...
                     dlc_F(obj.currentVid).file));
         obj.paw.data = vidTracking.grasp_p;
         obj.paw.fs = obj.VID_FS;
         obj.paw.t = linspace(0,...
            (numel(obj.paw.data)-1)/obj.paw.fs,...
             numel(obj.paw.data));
         
      end
      
      function guessAlignment(obj)
         % Upsample by 16 because of weird FS used by TDT...
         ds_fac = round((double(obj.beam.fs) * 16) / obj.FS);
         x = resample(double(obj.beam.data),16,ds_fac);
         
         % Resample DLC paw data to approx. same FS
         y = resample(obj.paw.data,obj.FS,round(obj.paw.fs));
         
         % Guess the lag based on cross correlation between 2 streams
         [R,lag] = getR(x,y);
         setAlignment(obj,parseR(R,lag));
      end
      
      function plotStreams(obj)
         plot(obj.ax,obj.paw.t,obj.paw.data,'LineWidth',1.5,'Color','b');
         plot(obj.ax,obj.beam.t,obj.beam.data,'LineWidth',1.5,'Color','r');
         if isstruct(obj.pellet)
            plot(obj.ax,...
                 obj.pellet.t,..obj.pellet.data,'LineWidth',1.5,'Color','m');
         end
      end
      
      % Set the trial hand and emit a notification about the event
      function setAlignment(obj,align_offset)
         obj.alignLag = align_offset;
         notify(obj,'align');
      end
      
      % Set the current video
      function setVideo(obj,curVidNum)
         obj.currentVid = curVidNum;
         notify(obj,'switchVid');
      end
      
   end

end